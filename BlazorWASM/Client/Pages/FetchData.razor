@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@using BlazorWASM.Shared;
@using System.Security.Claims;
@using System;
@using System.Collections.Generic;
@using System.Text.Json;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

    @if (user.Identity.IsAuthenticated)
    {
        <p>You are logged in.</p>
        <p>Welcome, @string.Join(", ", user.Claims.Select(claim => $"{claim.Type}: {claim.Value}"))</p>
        <p>Name: @user.FindFirst("name").Value</p>
        <p>Name: @userEmail</p>

        @* <p>Other Claims:</p>
        <ul>
            @foreach (var claim in user.Claims)
            {
                <li>@claim.Type: @claim.Value</li>
            }
        </ul> *@
    }
    else
    {
        <p>You are not logged in.</p>
    }
}

@code {
    private ClaimsPrincipal user;
    private WeatherForecast[]? forecasts;
    private String userEmail;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        userEmail = JsonSerializer.Deserialize<List<string>>(user.FindFirst("emails").Value).First();

        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
